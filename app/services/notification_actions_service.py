from app.utils.database_config import db_config
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class NotificationActionsService:
    """
    Servicio para manejar las acciones de los botones en los emails
    """
    
    @staticmethod
    def mark_as_received(notification_id, token):
        """
        Marca una notificaci√≥n como recibida usando el token de seguridad
        Permite m√∫ltiples destinatarios con el mismo token
        """
        try:
            # Verificar token v√°lido y no expirado
            # Permitir si est√° en estado 'enviado' o si ya est√° 'recibido' (para m√∫ltiples destinatarios)
            query_verify = """
            SELECT IdNotificacion, Estado, FechaExpiracion, Asunto
            FROM Notificaciones 
            WHERE IdNotificacion = ? 
              AND TokenRespuesta = ? 
              AND FechaExpiracion > GETDATE()
              AND Estado IN ('enviado', 'recibido')
            """
            
            result = db_config.execute_query(query_verify, [notification_id, token])
            
            if not result:
                logger.warning(f"Token inv√°lido o expirado para notificaci√≥n {notification_id}")
                return {
                    'success': False, 
                    'message': 'Token inv√°lido o expirado',
                    'type': 'error'
                }
            
            # Si ya est√° marcado como recibido, solo registrar la acci√≥n sin cambiar estado
            current_state = result[0]['Estado']
            
            if current_state == 'recibido':
                # Ya est√° marcado como recibido por otro destinatario
                logger.info(f"‚úÖ Notificaci√≥n {notification_id} ya estaba marcada como recibida")
                return {
                    'success': True,
                    'message': '‚úÖ Notificaci√≥n ya estaba marcada como recibida',
                    'type': 'success'
                }
            
            # Actualizar estado a "recibido" solo si no estaba ya marcado
            query_update = """
            UPDATE Notificaciones 
            SET Estado = 'recibido', 
                FechaRecibido = CASE WHEN FechaRecibido IS NULL THEN GETDATE() ELSE FechaRecibido END
            WHERE IdNotificacion = ? AND TokenRespuesta = ? AND Estado = 'enviado'
            """
            
            rows_affected = db_config.execute_non_query(query_update, [notification_id, token])
            
            if rows_affected >= 0:  # Cambio: >= 0 en lugar de > 0 para manejar casos donde ya estaba marcado
                # Registrar en auditor√≠a
                NotificationActionsService.log_action(
                    notification_id, 
                    'MARKED_RECEIVED', 
                    'Usuario marc√≥ notificaci√≥n como recibida'
                )
                
                logger.info(f"‚úÖ Notificaci√≥n {notification_id} marcada como recibida")
                return {
                    'success': True,
                    'message': '‚úÖ Notificaci√≥n marcada como recibida correctamente',
                    'type': 'success'
                }
            else:
                return {
                    'success': False,
                    'message': 'No se pudo actualizar la notificaci√≥n',
                    'type': 'error'
                }
                
        except Exception as e:
            logger.error(f"Error marcando notificaci√≥n {notification_id} como recibida: {e}")
            return {
                'success': False,
                'message': 'Error interno del sistema',
                'type': 'error'
            }
    
    @staticmethod
    def mark_as_resolved(notification_id, token):
        """
        Marca una notificaci√≥n como resuelta usando el token de seguridad.
        Permite m√∫ltiples destinatarios con el mismo token.
        Cuando una notificaci√≥n se marca como resuelta, actualiza autom√°ticamente todas las 
        notificaciones PENDIENTES que tengan el mismo IdAlerta.
        """
        try:
            # Verificar token v√°lido y no expirado
            # Permitir si est√° en estado 'enviado', 'recibido' o ya 'resuelto' (para m√∫ltiples destinatarios)
            query_verify = """
            SELECT IdNotificacion, Estado, FechaExpiracion, Asunto, IdAlerta
            FROM Notificaciones 
            WHERE IdNotificacion = ? 
              AND TokenRespuesta = ? 
              AND FechaExpiracion > GETDATE()
              AND Estado IN ('enviado', 'recibido', 'resuelto', 'cancelado')
            """
            
            result = db_config.execute_query(query_verify, [notification_id, token])
            
            if not result:
                logger.warning(f"Token inv√°lido o expirado para notificaci√≥n {notification_id}")
                return {
                    'success': False, 
                    'message': 'El enlace ha expirado o no es v√°lido',
                    'type': 'error'
                }
            
            notification_data = result[0]
            current_state = notification_data['Estado']
            id_alerta = notification_data['IdAlerta']
            
            # Si ya est√° marcado como resuelto, solo registrar la acci√≥n sin cambiar estado
            if current_state == 'resuelto':
                # Ya est√° marcado como resuelto por otro destinatario
                logger.info(f"‚úÖ Notificaci√≥n {notification_id} ya estaba marcada como resuelta")
                return {
                    'success': True,
                    'message': '‚úÖ Notificaci√≥n ya estaba marcada como resuelta',
                    'type': 'success'
                }
            
            # Actualizar estado a "resuelto" solo si no estaba ya marcado
            query_update = """
            UPDATE Notificaciones 
            SET Estado = 'resuelto', 
                FechaResuelto = CASE WHEN FechaResuelto IS NULL THEN GETDATE() ELSE FechaResuelto END
            WHERE IdNotificacion = ? AND TokenRespuesta = ? AND Estado IN ('enviado', 'recibido', 'cancelado')
            """
            
            rows_affected = db_config.execute_non_query(query_update, [notification_id, token])
            
            # NUEVA L√ìGICA: Actualizar todas las notificaciones PENDIENTES con el mismo IdAlerta
            related_resolved = 0
            if id_alerta is not None:
                logger.info(f"üîÑ Actualizando notificaciones PENDIENTES con IdAlerta: {id_alerta}")
                
                query_update_related = """
                UPDATE Notificaciones 
                SET Estado = 'resuelto', 
                    FechaResuelto = GETDATE()
                WHERE IdAlerta = ? 
                  AND Estado = 'pendiente'
                  AND IdNotificacion != ?
                """
                
                related_resolved = db_config.execute_non_query(query_update_related, [id_alerta, notification_id])
                
                if related_resolved > 0:
                    logger.info(f"‚úÖ Se marcaron como resueltas {related_resolved} notificaciones PENDIENTES con IdAlerta: {id_alerta}")
                    
                    # Registrar en auditor√≠a las actualizaciones relacionadas
                    NotificationActionsService.log_action(
                        notification_id, 
                        'ALERTAS_PENDIENTES_RESUELTAS', 
                        f'Se resolvieron {related_resolved} notificaciones pendientes con IdAlerta: {id_alerta}'
                    )
                else:
                    logger.info(f"‚ÑπÔ∏è No se encontraron notificaciones pendientes para resolver con IdAlerta: {id_alerta}")
            
            if rows_affected >= 0:  # Cambio: >= 0 en lugar de > 0 para manejar casos donde ya estaba marcado
                # Registrar en auditor√≠a la acci√≥n principal
                NotificationActionsService.log_action(
                    notification_id, 
                    'NOTIFICACION_RESUELTA',
                    f"Notificaci√≥n marcada como resuelta: {notification_data['Asunto']}"
                )
                
                # Preparar mensaje de respuesta
                total_resolved = 1 + related_resolved
                if related_resolved > 0:
                    message = f'‚úÖ Notificaci√≥n marcada como resuelta correctamente. Tambi√©n se resolvieron {related_resolved} notificaciones pendientes.'
                else:
                    message = '‚úÖ La notificaci√≥n ha sido marcada como resuelta correctamente'
                
                logger.info(f"Notificaci√≥n {notification_id} marcada como resuelta exitosamente (pendientes resueltas: {related_resolved})")
                return {
                    'success': True,
                    'message': message,
                    'type': 'success',
                    'related_resolved': related_resolved,
                    'total_resolved': total_resolved
                }
            else:
                return {
                    'success': False,
                    'message': 'No se pudo actualizar la notificaci√≥n',
                    'type': 'error'
                }
                
        except Exception as e:
            logger.error(f"Error marcando notificaci√≥n {notification_id} como resuelta: {e}")
            return {
                'success': False,
                'message': 'Error interno del sistema',
                'type': 'error'
            }
    
    @staticmethod
    def cancel_notification(notification_id, token):
        """
        Cancela una notificaci√≥n usando el token de seguridad.
        Permite m√∫ltiples destinatarios con el mismo token.
        Cuando una notificaci√≥n se cancela, tambi√©n cancela todas las notificaciones
        con el mismo Source_IdNotificacion (l√≥gica existente) o IdAlerta (nueva l√≥gica).
        """
        try:
            # Verificar token v√°lido y no expirado
            # Permitir cancelaci√≥n incluso si ya est√° cancelada (para m√∫ltiples destinatarios)
            query_verify = """
            SELECT IdNotificacion, Estado, FechaExpiracion, Asunto, Source_IdNotificacion, IdAlerta
            FROM Notificaciones 
            WHERE IdNotificacion = ? 
              AND TokenRespuesta = ? 
              AND FechaExpiracion > GETDATE()
              AND Estado IN ('enviado', 'recibido', 'cancelado', 'resuelto')
            """
            
            result = db_config.execute_query(query_verify, [notification_id, token])
            
            if not result:
                logger.warning(f"Token inv√°lido o expirado para notificaci√≥n {notification_id}")
                return {
                    'success': False, 
                    'message': 'Token inv√°lido o expirado',
                    'type': 'error'
                }
            
            notification_data = result[0]
            current_state = notification_data['Estado']
            source_id = notification_data['Source_IdNotificacion']
            id_alerta = notification_data['IdAlerta']
            
            # Si ya est√° cancelada, solo registrar la acci√≥n sin cambiar estado
            if current_state == 'cancelado':
                logger.info(f"‚úÖ Notificaci√≥n {notification_id} ya estaba cancelada")
                return {
                    'success': True,
                    'message': '‚úÖ Notificaci√≥n ya estaba cancelada',
                    'type': 'success'
                }
            
            # Cancelar la notificaci√≥n principal solo si no estaba cancelada
            query_update_main = """
            UPDATE Notificaciones 
            SET Estado = 'cancelado', 
                FechaCancelacion = CASE WHEN FechaCancelacion IS NULL THEN GETDATE() ELSE FechaCancelacion END
            WHERE IdNotificacion = ? AND TokenRespuesta = ? AND Estado IN ('enviado', 'recibido', 'resuelto')
            """
            
            rows_affected = db_config.execute_non_query(query_update_main, [notification_id, token])
            
            related_cancelled = 0
            
            if rows_affected >= 0:  # Cambio: >= 0 en lugar de > 0 para manejar casos donde ya estaba marcado
                
                # L√ìGICA EXISTENTE: Cancelar por Source_IdNotificacion (solo pendientes)
                if source_id is not None:
                    query_update_related = """
                    UPDATE Notificaciones 
                    SET Estado = 'cancelado', 
                        FechaCancelacion = GETDATE()
                    WHERE Source_IdNotificacion = ? 
                      AND Estado = 'pendiente'
                      AND IdNotificacion != ?
                    """
                    
                    source_cancelled = db_config.execute_non_query(query_update_related, [source_id, notification_id])
                    related_cancelled += source_cancelled
                    
                    if source_cancelled > 0:
                        logger.info(f"‚úÖ Se cancelaron {source_cancelled} notificaciones relacionadas por Source_IdNotificacion: {source_id}")
                
                # NUEVA L√ìGICA: Cancelar todas las notificaciones PENDIENTES con el mismo IdAlerta
                if id_alerta is not None:
                    logger.info(f"üîÑ Cancelando notificaciones PENDIENTES con IdAlerta: {id_alerta}")
                    
                    query_cancel_by_alerta = """
                    UPDATE Notificaciones 
                    SET Estado = 'cancelado', 
                        FechaCancelacion = GETDATE()
                    WHERE IdAlerta = ? 
                      AND Estado = 'pendiente'
                      AND IdNotificacion != ?
                    """
                    
                    alerta_cancelled = db_config.execute_non_query(query_cancel_by_alerta, [id_alerta, notification_id])
                    related_cancelled += alerta_cancelled
                    
                    if alerta_cancelled > 0:
                        logger.info(f"‚úÖ Se cancelaron {alerta_cancelled} notificaciones PENDIENTES con IdAlerta: {id_alerta}")
                        
                        # Registrar en auditor√≠a las cancelaciones por IdAlerta
                        NotificationActionsService.log_action(
                            notification_id, 
                            'ALERTAS_PENDIENTES_CANCELADAS', 
                            f'Se cancelaron {alerta_cancelled} notificaciones pendientes con IdAlerta: {id_alerta}'
                        )
                    else:
                        logger.info(f"‚ÑπÔ∏è No se encontraron notificaciones pendientes para cancelar con IdAlerta: {id_alerta}")
                
                # Registrar en auditor√≠a la cancelaci√≥n principal
                NotificationActionsService.log_action(
                    notification_id, 
                    'NOTIFICATION_CANCELLED', 
                    f'Usuario cancel√≥ la notificaci√≥n. Source_IdNotificacion: {source_id}, IdAlerta: {id_alerta}'
                )
                
                # Preparar mensaje de respuesta
                total_cancelled = 1 + related_cancelled
                if related_cancelled > 0:
                    message = f'‚ùå Notificaci√≥n cancelada correctamente. Tambi√©n se cancelaron {related_cancelled} notificaciones/alertas relacionadas'
                else:
                    message = '‚ùå Notificaci√≥n cancelada correctamente'
                
                logger.info(f"Notificaci√≥n {notification_id} cancelada (relacionadas: {related_cancelled})")
                return {
                    'success': True,
                    'message': message,
                    'type': 'success',
                    'related_cancelled': related_cancelled,
                    'total_cancelled': total_cancelled
                }
            else:
                return {
                    'success': False,
                    'message': 'No se pudo cancelar la notificaci√≥n',
                    'type': 'error'
                }
                
        except Exception as e:
            logger.error(f"Error cancelando notificaci√≥n {notification_id}: {e}")
            return {
                'success': False,
                'message': 'Error interno del sistema',
                'type': 'error'
            }
    
    @staticmethod
    def get_notification_status(notification_id):
        """
        Obtiene el estado actual de una notificaci√≥n
        """
        try:
            query = """
            SELECT IdNotificacion, Estado, FechaRecibido, FechaCancelacion, 
                   FechaExpiracion, FechaResuelto, Asunto, Destinatario
            FROM Notificaciones 
            WHERE IdNotificacion = ?
            """
            
            result = db_config.execute_query(query, [notification_id])
            
            if result:
                return result[0]
            else:
                return None
                
        except Exception as e:
            logger.error(f"Error obteniendo estado de notificaci√≥n {notification_id}: {e}")
            return None
    
    @staticmethod
    def log_action(notification_id, action, description):
        """
        Registra la acci√≥n en la tabla de auditor√≠a
        """
        try:
            query = """
            INSERT INTO Auditoria (accion, detalle, fecha_aud, [user])
            VALUES (?, ?, GETDATE(), 'user_action')
            """
            
            detail = f"ID_{notification_id}: {description}"
            db_config.execute_non_query(query, [action, detail])
            
        except Exception as e:
            logger.error(f"Error registrando acci√≥n en auditor√≠a: {e}")
    




    @staticmethod
    def get_statistics():
        """
        Obtiene estad√≠sticas de las acciones realizadas
        """
        try:
            query = """
            SELECT 
                Estado,
                COUNT(*) as count,
                COUNT(CASE WHEN FechaRecibido IS NOT NULL THEN 1 END) as received_count,
                COUNT(CASE WHEN FechaResuelto IS NOT NULL THEN 1 END) as resolved_count,
                COUNT(CASE WHEN FechaCancelacion IS NOT NULL THEN 1 END) as cancelled_count
            FROM Notificaciones 
            WHERE TokenRespuesta IS NOT NULL
            GROUP BY Estado
            """
            
            return db_config.execute_query(query)
            
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas: {e}")
            return []